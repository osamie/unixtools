Author:			Osazuwa Omigie
Date:			1-March-2014
Course:			CSCI E-28 
Program Name:	Pfind - Pseudo Find


=======================
Deliverables
=======================
Program Source Code: 
	pfind.c

Typescript of its output from the test.pﬁnd test script:

Makeﬁle

Design outline file: DesignOutline.txt


=======
PART 1
=======

Name and description of 3 unix programs that operate on directory trees; name of the program, a sample command line, and a one sentence description of what the program does.

A) chown
A sample usage: chown -R <user>:group <file/directory>. For example, 
			$ chown -R oracle:dba oracle11gr2. 

Description: This program changes the file owner and group of a file/direftory, and using the -R is able to apply this change recursively on subdirectories of the specified folder.   



B) chgrp
A sample usage: chgrp -R <groupname> <file/dir>. For example, 
			$ chgrp -R everyone test_folder 

Description: This program changes the group of a given file; it is also able to do this recursively on a given directory (i.e on all subdirectories as well).



C) Grep
A sample Usage: grep -R <regular_expression> <dir> 
			$ grep -R expression[0-9] .
Description: This program searches a given file/files for lines that match one or more specified patterns; using the -R option, the program is also able to search recursively for line patterns of all files under a directory tree.  


======
PART 3
======
This is my current alogirithm for traversing (recursively) the directory tree. 

	A) Attempts to open the given directory or path.
	B) If this fails, writes to the standard error stream saying the reason (using errno's value).
	C) Else if opening path/directory is successful, clears errno and performs the following;
	D) Continues to read every entry in the directory into a dirent struct.
	E) For each dirent struct (or entry read) in the directory, the following steps are performed;
		i. If the entry is a "." or ".." ignore it and read next dir entry.
		ii. Else, allocate memmory for a new string and put a properly formatted path of the dir entry currently been parsed.
		iii. The properly formatted path string of a dirent is a concatenation of its parent path (passed in the function argument) and its d_name property 
		iv. Next, check if the entry meets the search criteria.
		v. If it meets the criteria, add the newly created string (dirent path) to the results buffer and increment the buffer's current index. 
		vi. If the entry added is a directory itself, then call the parsedir function, passing the newly created string as the starting directory. 
	F) close the opened path/directory.
	G) return

This is the modification I would make in order to support the system open file limit. 

In step E(vi) above, instead of calling the recursive function before closing the current directory in step F, I would simply store the path to every subdirectoy in a local buffer. After looping through the entries and closing the currently opened path/directory in step F, then I iterate through my local buffer of subdirectoy paths, calling the recursive function on each subdirectory.
Rewriting steps E and F of the algorithm:

	E) For each dirent struct (or entry read) in the directory, the following steps are performed;
		i. If the entry is a "." or ".." ignore it and read next dir entry.
		
		ii. Else, allocate memmory for a new string and put a properly formatted path of the dir entry currently been parsed.
		
		iii. The properly formatted path string of a dirent is a concatenation of its parent path (passed in the function argument) and its d_name property 
		
		iv. Next, check if the entry meets the search criteria; If it does not meet the criteria continue the loop onto the next entry.
		
		v. If the entry is a sub directory itself, store its path (the newly created string) in a the local buffer. Do not process if yet.  
		
		vi. Else, add the newly created string (dirent path) to the results buffer and increment the buffer's current index. 
		
	F) close the opened path/directory.

	G) iterate through the local buffer of sub directories, calling this function on each item. 




