#!/bin/sh
#
#	test.aac
#
#	purpose:	shell script to test the operation of
#			the ac clone
#
#	usage:		test.aac
#
#	operation:	1. makes sure that a program called aac exists
#			2. runs the real ac on four sample files
#			3. runs this ac on the same sample files
#			4. dumps text of sample, or hints to logfile
#
#	note:		filenames are X.wtmp for data and X.people
#			for a list of people to try for X.wtmp
#			X.note is a file to display if that file fails
#
#	history:
#			1.5 random changes for the new decade
#			1.4 filenames are now X.wtmp and X.test for
#			    easier filing 
#			1.3 replaced echo -n with printf
#
#

	Sccs_Id="@(#) test.aac 1.5 10.02.09"

	ROOT=/home/l/i/lib215/hw/aac
	RPATH="~lib215/hw/aac"
	REAL=/usr/bin/ac
	WTMP=/var/log/wtmp

	if test $USER != lib215
	then
		:
		# echo "Test script is not yet working.  Try again later."
		# exit
	fi


# -------------------------------------------------------------------------
#	part I : locate program to test
# -------------------------------------------------------------------------

	PROG=aac

	if [ ! -f aac ]
	then
		echo    "There is no program here called aac."
		printf "What program should I test (press Return to quit)? "
		read PROG
		if [ "_$PROG" = "_" ]
		then
			exit
		fi
	fi

	echo "	A report of this test will be saved in a file called
	aac.report "
	if [ -f aac.report ]
	then
		printf "	Overwrite existing aac.report ?"
		read foo
		case $foo in
			y*|Y*)	;;
			*)	exit	;;
		esac
	fi

	CWD=`pwd`
	REPORT=$CWD/aac.report
	PROG=$CWD/$PROG
	trap "rm -f /tmp/a*.$$ /tmp/aa*.$$ ; exit " 0 2 3 15

# -------------------------------------------------------------------------
# a function to show output including control chars
#	args are real output, test output
# -------------------------------------------------------------------------

	showdiffs()
	{
		echo "  Real ac says:"
		sed 	-e 's/^/    |/' -e 's/	/<tab>/g'	\
			-e 's/$/<nl>/' $1
		echo "  Your ac says:"
		sed 	-e 's/^/    |/' -e 's/	/<tab>/g'	\
			-e 's/$/<nl>/' $2
	}

	#
	# run a test
	# args are syscmd studentcmd filename username
	#
	run_test()
	{
		syscmd="$1"
		stdcmd="$2"
		file="$3"
		user="$4"

		#
		# ... run the real one
		#
		$syscmd > /tmp/aco.$$

		#
		# ... run the test one
		#
		if $stdcmd > /tmp/aaco.$$ 
		then
			:
		else
			echo "$PROG returns non-zero status: bye"
			exit
		fi
		#
		# ... compare them
		#
		set x `cat /tmp/aco.$$`		# snag tokens
		shift
		AC_1=$1 ; AC_2=$2		# and hold em
		set x `cat /tmp/aaco.$$`	# do real and mine
		shift
		ACAC_1=$1 ; ACAC_2=$2		

		printf " [$AC_1 $AC_2] vs [$ACAC_1 $ACAC_2] .."
		if diff /tmp/aco.$$ /tmp/aaco.$$ > /tmp/acdif.$$
		then
			echo "OK"
			echo "searching $file for $user: OK" >> $REPORT
		elif test "$ACAC_2" = "$AC_2"
		then
			echo "Almost OK"
			echo "searching $file for $user: Almost ">>$REPORT
			echo "Times match, formats differ" >>$REPORT
			showdiffs /tmp/aco.$$ /tmp/aaco.$$ >>$REPORT
			OK=N
			DATASET_STAT=NOT_OK
		else
			echo "Not OK"
			echo "searching $file for $user: Differ" >>$REPORT
			showdiffs /tmp/aco.$$ /tmp/aaco.$$ >>$REPORT
			OK=N
			DATASET_STAT=NOT_OK
		fi
	}
# -------------------------------------------------------------------------
#	part II : Change to test directory
# -------------------------------------------------------------------------

	cd $ROOT/testdir
	printf "Test of $PROG \n at `date`\n " > $REPORT

	printf "\n Testing your program and regular ac on sample files..\n"

	OK=Y

	#
	# first test the regular wtmp file
	#

	{
	printf "Test 1a: using regular wtmp file...\n"

	    run_test "$REAL $USER" "$PROG $USER" "regular wtmp file" $USER

	printf "Test 1b: reversing args so name is last..\n"
	
	    CMD="-f $WTMP $USER"
	    run_test "$REAL $CMD" "$PROG $CMD" "regular wtmp file" $USER

	printf "Test 1c: leaving out the arg after -f ...\n"

	    $PROG $USER -f

	printf "Test 1d: giving an unsupported option  ....\n"

	    $PROG $USER -Z
	} | tee -a $REPORT

	printf "Press enter Enter to continue "
	read x

	#
	#
	#
	# loop through all datasets in the testdir
	#
	for f in *.wtmp
	do
		DATASET_STAT=OK		# for reporting errors on this dataset

		TESTNAME=`basename $f .wtmp`
		echo "	testing $f :"
		if test -f $TESTNAME.people
		then
			# loop through all people for that dataset

			for p in `awk '{print $1}' $TESTNAME.people`
			do
				printf "		$p .."

				run_test "$REAL -f $f $p" "$PROG -f $f $p" $f $p
			done
			if test $DATASET_STAT = NOT_OK
			then
				if test -f $TESTNAME.note
				then
					echo "==== NOTE ===="
					cat $TESTNAME.note
					echo "=============="
					printf "Press  Enter to continue.."
					read X
				fi
			fi
		fi
		#
		# I am not sure why this is here.
		# It seems to display the required result but not
		# test it.  In the past, it was used with timejumps
		# and changes which were not supported by tru64 ac
		# but we don't require that feature any more
		#
		if test -f $TESTNAME.run
		then
			for p in `cut -f1 $TESTNAME.run`
			do
				printf "		$p .."
				#
				# run test one
				#
				if $PROG -f $f $p > /tmp/aaco.$$
				then
					:
				else
					echo "$PROG returns non-zero status:bye"
					exit
				fi
				printf "Result is: "
				cat /tmp/aaco.$$
				printf "\t\tResult should be: "
				grep "^$p" $TESTNAME.run | cut -f2
				rm -f /tmp/aaco.$$
			done
		fi
		#
		# .. report hints to file
		#
		if test $OK = Y
		then
			echo ""
			continue
		fi

		{
			printf "\n\tTo view the data set, use this command:\n\n"
			printf "\t\t~lib215/hw/aac/files/dumputmp $RPATH/testdir/$f | more\n\n"
		} >> $REPORT
		echo "" >> $REPORT
	done

	echo "The report of this test is in aac.report"
